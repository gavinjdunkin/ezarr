version: '3.8'  # Add this version header if you're using Docker Compose v2

name: ezarr
services:
  sonarr:
    image: lscr.io/linuxserver/sonarr:latest
    container_name: sonarr
    environment:
      - PUID=${SONARR_UID}
      - PGID=${MEDIACENTER_GID}
      - UMASK=002
      - TZ=${TIMEZONE}
    volumes:
      - ${ROOT_DIR}/config/sonarr-config:/config
      - ${ROOT_DIR}/data:/data
    ports:
      - "8989:8989"
    restart: unless-stopped

  radarr:
    image: lscr.io/linuxserver/radarr:latest
    container_name: radarr
    environment:
      - PUID=${RADARR_UID}
      - PGID=${MEDIACENTER_GID}
      - UMASK=002
      - TZ=${TIMEZONE}
    volumes:
      - ${ROOT_DIR}/config/radarr-config:/config
      - ${ROOT_DIR}/data:/data
    ports:
      - "7878:7878"
    restart: unless-stopped

  lidarr:
    image: lscr.io/linuxserver/lidarr:latest
    container_name: lidarr
    environment:
      - PUID=${LIDARR_UID}
      - PGID=${MEDIACENTER_GID}
      - UMASK=002
      - TZ=${TIMEZONE}
    volumes:
      - ${ROOT_DIR}/config/lidarr-config:/config
      - ${ROOT_DIR}/data:/data
    ports:
      - "8686:8686"
    restart: unless-stopped

  readarr:
    image: lscr.io/linuxserver/readarr:develop
    container_name: readarr
    environment:
      - PUID=${READARR_UID}
      - PGID=${MEDIACENTER_GID}
      - UMASK=002
      - TZ=${TIMEZONE}
    volumes:
      - ${ROOT_DIR}/config/readarr-config:/config
      - ${ROOT_DIR}/data:/data
    ports:
      - "8787:8787"
    restart: unless-stopped

  audiobookshelf:
    image: ghcr.io/advplyr/audiobookshelf:latest
    container_name: audiobookshelf
    environment:
      - user=${AUDIOBOOKSHELF_UID}:${MEDIACENTER_GID}
      - TZ=${TIMEZONE}
    volumes:
      - ${ROOT_DIR}/config/audiobookshelf:/config
      - ${ROOT_DIR}/data/media/audiobooks:/audiobooks
      - ${ROOT_DIR}/data/media/podcasts:/podcasts
      - ${ROOT_DIR}/data/media/audiobookshelf-metadata:/metadata
    ports:
      - "13378:80"
    restart: unless-stopped

  bazarr:
    image: lscr.io/linuxserver/bazarr:latest
    container_name: bazarr
    environment:
      - PUID=${BAZARR_UID}
      - PGID=${MEDIACENTER_GID}
      - TZ=${TIMEZONE}
    volumes:
      - ${ROOT_DIR}/config/bazarr-config:/config
      - ${ROOT_DIR}/data/media:/media
    ports:
      - "6767:6767"
    restart: unless-stopped

  overseerr:
    image: sctx/overseerr:latest
    container_name: overseerr
    environment:
      - PUID=${OVERSEERR_UID}
      - PGID=${MEDIACENTER_GID}
      - UMASK=002
      - TZ=${TIMEZONE}
    volumes:
      - ${ROOT_DIR}/config/overseerr-config:/app/config
    ports:
      - "5055:5055"
    restart: unless-stopped

  prowlarr:
    image: lscr.io/linuxserver/prowlarr:develop
    container_name: prowlarr
    environment:
      - PUID=${PROWLARR_UID}
      - PGID=${MEDIACENTER_GID}
      - UMASK=002
      - TZ=${TIMEZONE}
    volumes:
      - ${ROOT_DIR}/config/prowlarr-config:/config
    ports:
      - "9696:9696"
    restart: unless-stopped

  jackett:
    image: lscr.io/linuxserver/jackett:latest
    container_name: jackett
    environment:
      - PUID=${JACKETT_UID}
      - PGID=${MEDIACENTER_GID}
      - UMASK=002
      - TZ=${TIMEZONE}    
    volumes:
      - ${ROOT_DIR}/config/jackett-config:/config
    ports:
      - 9117:9117
    restart: unless-stopped

  flaresolverr:
    image: ghcr.io/flaresolverr/flaresolverr:latest
    container_name: flaresolverr
    environment:
      - LOG_LEVEL=${LOG_LEVEL:-info}
      - LOG_HTML=${LOG_HTML:-false}
      - CAPTCHA_SOLVER=${CAPTCHA_SOLVER:-none}
      - TZ=${TIMEZONE}
    ports:
      - "8191:8191"
    restart: unless-stopped

  plex:
    image: lscr.io/linuxserver/plex:latest
    container_name: plex
    network_mode: host
    environment:
      - PUID=${PLEX_UID}
      - PGID=${MEDIACENTER_GID}
      - VERSION=docker
      - PLEX_CLAIM=${PLEX_CLAIM}
    volumes:
      - ${ROOT_DIR}/config/plex-config:/config
      - ${ROOT_DIR}/data/media:/media
    restart: unless-stopped

  tautulli:
    image: lscr.io/linuxserver/tautulli:latest
    container_name: tautulli
    environment:
      - PUID=${UID}
      - PGID=${MEDIACENTER_GID}
      - TZ=${TIMEZONE}
    volumes:
      - ${ROOT_DIR}/config/tautulli-config:/config
    ports:
      - "8181:8181"
    restart: unless-stopped

  qbittorrent:
    image: lscr.io/linuxserver/qbittorrent:latest
    container_name: qbittorrent
    network_mode: "service:gluetun"
    environment:
      - PUID=${QBITTORRENT_UID}
      - PGID=${MEDIACENTER_GID}
      - UMASK=002
      - TZ=${TIMEZONE}
      - WEBUI_PORT=8080
    volumes:
      - ${ROOT_DIR}/config/qbittorrent-config:/config
      - ${ROOT_DIR}/data/torrents:/data/torrents
    restart: unless-stopped

  sabnzbd:
    image: lscr.io/linuxserver/sabnzbd:latest
    container_name: sabnzbd
    environment:
      - PUID=${SABNZBD_UID}
      - PGID=${MEDIACENTER_GID}
      - UMASK=002
      - TZ=${TIMEZONE}
    volumes:
      - ${ROOT_DIR}/config/sabnzbd-config:/config
      - ${ROOT_DIR}/data/usenet:/downloads
    ports:
      - "8081:8080"
    restart: unless-stopped

  gluetun:
    image: qmcgaw/gluetun
    cap_add:
      - NET_ADMIN
    environment:
      - VPN_SERVICE_PROVIDER=surfshark
      - VPN_TYPE=wireguard
      - WIREGUARD_PRIVATE_KEY=GOCD8S1t+4vHUQqB66EmgMjLLjP9+llaoDNF2xY8Lk4=
      - WIREGUARD_ADDRESSES=10.14.0.2/16
      - SERVER_COUNTRIES=Netherlands
    ports:
      - "8080:8080"
      - "6881:6881"
      - "6881:6881/udp"

  # container updates + health
  watchtower:
    image: containrrr/watchtower
    container_name: watchtower
    restart: always
    environment:
      - WATCHTOWER_CLEANUP=true
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock

  autoheal:
    image: willfarrell/autoheal:latest
    container_name: autoheal
    restart: always
    environment:
      - AUTOHEAL_CONTAINER_LABEL=all
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock

  # system monitoring

  homepage:
    image: ghcr.io/gethomepage/homepage:latest
    container_name: homepage
    environment:
      - PUID=${HOMEPAGE_UID}
      - PGID=${MEDIACENTER_GID}
      - TZ=${TIMEZONE}
      - UMASK=002
    ports:
      - 3000:3000
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ${ROOT_DIR}/config/homepage-config:/config
    restart: unless-stopped
    
  dockerproxy:
    image: ghcr.io/tecnativa/docker-socket-proxy:latest
    container_name: dockerproxy
    environment:
      - CONTAINERS=1 # Allow access to viewing containers
      - SERVICES=1 # Allow access to viewing services (necessary when using Docker Swarm)
      - TASKS=1 # Allow access to viewing tasks (necessary when using Docker Swarm)
      - POST=0 # Disallow any POST operations (effectively read-only)
    ports:
      - 10.0.0.87:2375:2375
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro # Mounted as read-only
    restart: unless-stopped